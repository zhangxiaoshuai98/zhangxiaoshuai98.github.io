<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>源码 on ZhangXiaoshuai</title>
    <link>https://zhangxiaoshuai98.github.io/tags/%E6%BA%90%E7%A0%81/</link>
    <description>Recent content in 源码 on ZhangXiaoshuai</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 07 Jun 2020 18:10:14 +0100</lastBuildDate>
    
	<atom:link href="https://zhangxiaoshuai98.github.io/tags/%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mybatis源码分析</title>
      <link>https://zhangxiaoshuai98.github.io/article/mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 07 Jun 2020 18:10:14 +0100</pubDate>
      
      <guid>https://zhangxiaoshuai98.github.io/article/mybatis%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>Mybatis中的底层源码简单分析 简单执行过程梳理  调用了SqlSessionFactoryBuilder下builder()方法；
在这个方法中，首先创造了xMLConfigBuilder对象，其构造器中包含了创建configuration对象语句，但此时configuration对象中的成员还并没有被赋值。 执行xMLConfigBuilder对象中的parse()，此时全局配置被解析，所有xml解析的对象被放入configuration对象中。 将configuration传给DefaultSqlSessionFactory的构造器，返回一个DefaultSqlSessionFactory。到此，SqlSessionFactory构造完毕。 调用factory中的openSession()方法，在factory中利用config中的信息，将executor创建出来，和config一起传给DefaultSqlSession构造器，此时sqlSession对象成功创建。 调用sqlSession的getMapper()方法，其实底层调用的是config.getMapper，其又调用了mapperRegistry.getMapper。 在getMapper()方法中，利用mapperProxyFactory创建了mapperProxy代理对象，但它并不是最终的代理对象，他只是执行器 （实现了InvocationHandler，有invoke方法的对象），而真正的代理类是JDK中的对象Proxy.newProxyInstance动态创建（动态代理）。 执行代理类下的方法，其直接调用了mapperProxy(InvocationHandler)下的invoke()方法，经过跳转，其实际执行的是mapperProxy下的cachedInvoker。 最终执行SQL语句的，是StatementHandler，返回结果由ResultSetHandler处理。  </description>
    </item>
    
    <item>
      <title>Tomcat源码分析</title>
      <link>https://zhangxiaoshuai98.github.io/article/tomcat%E5%B1%82%E6%AC%A1/</link>
      <pubDate>Wed, 06 May 2020 18:10:14 +0100</pubDate>
      
      <guid>https://zhangxiaoshuai98.github.io/article/tomcat%E5%B1%82%E6%AC%A1/</guid>
      <description>Tomcat封装的非常好，以至于我们在使用中忽视了它的底层结构，在初步上手后，了解它的基本结构和运行原理是有必要的。</description>
    </item>
    
  </channel>
</rss>