<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java初级知识点笔记 on ZhangXiaoshuai</title>
    <link>https://zhangxiaoshuai98.github.io/categories/java%E5%88%9D%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in java初级知识点笔记 on ZhangXiaoshuai</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Nov 2019 18:10:14 +0100</lastBuildDate>
    
	<atom:link href="https://zhangxiaoshuai98.github.io/categories/java%E5%88%9D%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTML中form表entype三种属性</title>
      <link>https://zhangxiaoshuai98.github.io/article/html%E4%B8%ADform%E8%A1%A8entype%E4%B8%89%E7%A7%8D%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Fri, 15 Nov 2019 18:10:14 +0100</pubDate>
      
      <guid>https://zhangxiaoshuai98.github.io/article/html%E4%B8%ADform%E8%A1%A8entype%E4%B8%89%E7%A7%8D%E5%B1%9E%E6%80%A7/</guid>
      <description>form表单中enctype属性的三种类型 form表单中enctype属性可以用来控制对表单数据的发送前的如何进行编码，enctype有三种，分别为：
  multipart/form-data不对字符编码，用于发送二进制的文件，其他两种类型不能用于发送文件；    text/plain用于发送纯文本内容，空格转换为 &amp;ldquo;+&amp;rdquo; 加号，不对特殊字符进行编码，一般用于email之类的；    application/x-www-form-urlencoded，在发送前会编码所有字符，即在发送到服务器之前，所有字符都会进行编码（空格转换为 &amp;ldquo;+&amp;rdquo; 加号，&amp;ldquo;+&amp;quot;加号转换为空格，特殊符号转换为 ASCII HEX 值）。   其中application/x-www-form-urlencoded为默认类型。
接收数据的方式   当定义enctype为multipart/form-data时(主要用于上传文件、视频等)，用以下方式接收  request.getInputStream();   当定义enctype为text/plain时，使用以下方式接收数据  request.getReader();   当定义enctype为application/x-www-form-urlencoded时，使用以下方式接收数据  request.getParameter(参数名);  </description>
    </item>
    
    <item>
      <title>字节码和机器码的概念</title>
      <link>https://zhangxiaoshuai98.github.io/article/%E5%AD%97%E8%8A%82%E7%A0%81%E5%92%8C%E6%9C%BA%E5%99%A8%E7%A0%81%E7%9A%84%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sun, 06 Oct 2019 18:10:14 +0500</pubDate>
      
      <guid>https://zhangxiaoshuai98.github.io/article/%E5%AD%97%E8%8A%82%E7%A0%81%E5%92%8C%E6%9C%BA%E5%99%A8%E7%A0%81%E7%9A%84%E6%A6%82%E5%BF%B5/</guid>
      <description>字节码和机器码的概念 本文主要说明在学习java时的体会和理解
  在编译时，jdk将我们的源码(也就是.java)转成字节码文件(.class)，字节码文件中包含了JVM能够识别的代码。 在运行时，JVM读取运行字节码文件，然后转化为机器码(只包含0和1)，进而让机器执行  </description>
    </item>
    
    <item>
      <title>抽象和接口的区别</title>
      <link>https://zhangxiaoshuai98.github.io/article/%E6%8A%BD%E8%B1%A1%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zhangxiaoshuai98.github.io/article/%E6%8A%BD%E8%B1%A1%E5%92%8C%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>java中抽象类和接口的区别 在java中，我们使用接口较多，而抽象类较少，所以导致我们常常分不清抽象类和接口的区别。其实只需要掌握三个方面，就可以完全明白他们的区别了，这三个方面分别是：成员变量、方法、构造器。
抽象类  成员变量 既可以是变量，也可以是常量 方法 既可以是普通方法也可以是抽象方法 构造器
可以有构造器，但不可以直接创造对象，是用来方便子类流通数据  接口  成员变量 只能是常量，默认被public static final修饰 方法 只能是抽象方法，默认被public abstract修饰 构造器 不可以有构造器   总结 接口相比抽象类更加抽象，所以我们有抽象需求时，一般都使用接口。</description>
    </item>
    
    <item>
      <title>类和类之间的关系总结</title>
      <link>https://zhangxiaoshuai98.github.io/article/%E7%B1%BB%E5%92%8C%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zhangxiaoshuai98.github.io/article/%E7%B1%BB%E5%92%8C%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E6%80%BB%E7%BB%93/</guid>
      <description>类和类之间有一下几种关系  实现 继承 依赖 关联 聚合 组合   除了实现和继承，剩下四种关系都比较靠主观判断，只靠代码是不能区分的。 总体来说，关系强度：依赖&amp;lt;关联&amp;lt;聚合&amp;lt;组合 当然，根据迪米特原则，我们尽量要少让类和类之间产生关系 参考网址</description>
    </item>
    
  </channel>
</rss>